// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace CatalogService.CompiledModels
{
    public partial class CatalogDbContextModel
    {
        partial void Initialize()
        {
            var catalogBrand = CatalogBrandEntityType.Create(this);
            var catalogItem = CatalogItemEntityType.Create(this);
            var catalogType = CatalogTypeEntityType.Create(this);

            CatalogItemEntityType.CreateForeignKey1(catalogItem, catalogBrand);
            CatalogItemEntityType.CreateForeignKey2(catalogItem, catalogType);

            CatalogBrandEntityType.CreateAnnotations(catalogBrand);
            CatalogItemEntityType.CreateAnnotations(catalogItem);
            CatalogTypeEntityType.CreateAnnotations(catalogType);

            var sequences = new SortedDictionary<(string, string?), ISequence>();
            var catalog_brand_hilo = new RuntimeSequence(
                "catalog_brand_hilo",
                this,
                typeof(long),
                incrementBy: 10);

            sequences[("catalog_brand_hilo", null)] = catalog_brand_hilo;

            var catalog_hilo = new RuntimeSequence(
                "catalog_hilo",
                this,
                typeof(long),
                incrementBy: 10);

            sequences[("catalog_hilo", null)] = catalog_hilo;

            var catalog_type_hilo = new RuntimeSequence(
                "catalog_type_hilo",
                this,
                typeof(long),
                incrementBy: 10);

            sequences[("catalog_type_hilo", null)] = catalog_type_hilo;

            AddAnnotation("Relational:Sequences", sequences);
            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.0-preview.4.23259.3");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var catalogBrand = FindEntityType("CatalogService.CatalogBrand")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            catalogBrand.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var catalogServiceCatalogBrandTableBase = new TableBase("CatalogService.CatalogBrand", null, relationalModel);
            var brandColumnBase = new ColumnBase<ColumnMappingBase>("Brand", "character varying(100)", catalogServiceCatalogBrandTableBase);
            catalogServiceCatalogBrandTableBase.Columns.Add("Brand", brandColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", catalogServiceCatalogBrandTableBase);
            catalogServiceCatalogBrandTableBase.Columns.Add("Id", idColumnBase);
            relationalModel.DefaultTables.Add("CatalogService.CatalogBrand", catalogServiceCatalogBrandTableBase);
            var catalogServiceCatalogBrandMappingBase = new TableMappingBase<ColumnMappingBase>(catalogBrand, catalogServiceCatalogBrandTableBase, true);
            catalogServiceCatalogBrandTableBase.AddEntityTypeMapping(catalogServiceCatalogBrandMappingBase, false);
            defaultTableMappings.Add(catalogServiceCatalogBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogBrandTableBase.FindColumn("Id")!, catalogBrand.FindProperty("Id")!, catalogServiceCatalogBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogBrandTableBase.FindColumn("Brand")!, catalogBrand.FindProperty("Brand")!, catalogServiceCatalogBrandMappingBase);

            var tableMappings = new List<TableMapping>();
            catalogBrand.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var catalogBrandTable = new Table("CatalogBrand", null, relationalModel);
            var idColumn = new Column("Id", "integer", catalogBrandTable);
            catalogBrandTable.Columns.Add("Id", idColumn);
            var brandColumn = new Column("Brand", "character varying(100)", catalogBrandTable);
            catalogBrandTable.Columns.Add("Brand", brandColumn);
            var pK_CatalogBrand = new UniqueConstraint("PK_CatalogBrand", catalogBrandTable, new[] { idColumn });
            catalogBrandTable.PrimaryKey = pK_CatalogBrand;
            var pK_CatalogBrandUc = RelationalModel.GetKey(this,
                "CatalogService.CatalogBrand",
                new[] { "Id" });
            pK_CatalogBrand.MappedKeys.Add(pK_CatalogBrandUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CatalogBrandUc).Add(pK_CatalogBrand);
            catalogBrandTable.UniqueConstraints.Add("PK_CatalogBrand", pK_CatalogBrand);
            relationalModel.Tables.Add(("CatalogBrand", null), catalogBrandTable);
            var catalogBrandTableMapping = new TableMapping(catalogBrand, catalogBrandTable, true);
            catalogBrandTable.AddEntityTypeMapping(catalogBrandTableMapping, false);
            tableMappings.Add(catalogBrandTableMapping);
            RelationalModel.CreateColumnMapping(catalogBrandTable.FindColumn("Id")!, catalogBrand.FindProperty("Id")!, catalogBrandTableMapping);
            RelationalModel.CreateColumnMapping(catalogBrandTable.FindColumn("Brand")!, catalogBrand.FindProperty("Brand")!, catalogBrandTableMapping);

            var catalogItem = FindEntityType("CatalogService.CatalogItem")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            catalogItem.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var catalogServiceCatalogItemTableBase = new TableBase("CatalogService.CatalogItem", null, relationalModel);
            var availableStockColumnBase = new ColumnBase<ColumnMappingBase>("AvailableStock", "integer", catalogServiceCatalogItemTableBase);
            catalogServiceCatalogItemTableBase.Columns.Add("AvailableStock", availableStockColumnBase);
            var catalogBrandIdColumnBase = new ColumnBase<ColumnMappingBase>("CatalogBrandId", "integer", catalogServiceCatalogItemTableBase);
            catalogServiceCatalogItemTableBase.Columns.Add("CatalogBrandId", catalogBrandIdColumnBase);
            var catalogTypeIdColumnBase = new ColumnBase<ColumnMappingBase>("CatalogTypeId", "integer", catalogServiceCatalogItemTableBase);
            catalogServiceCatalogItemTableBase.Columns.Add("CatalogTypeId", catalogTypeIdColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "text", catalogServiceCatalogItemTableBase)
            {
                IsNullable = true
            };
            catalogServiceCatalogItemTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "integer", catalogServiceCatalogItemTableBase);
            catalogServiceCatalogItemTableBase.Columns.Add("Id", idColumnBase0);
            var maxStockThresholdColumnBase = new ColumnBase<ColumnMappingBase>("MaxStockThreshold", "integer", catalogServiceCatalogItemTableBase);
            catalogServiceCatalogItemTableBase.Columns.Add("MaxStockThreshold", maxStockThresholdColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "character varying(50)", catalogServiceCatalogItemTableBase);
            catalogServiceCatalogItemTableBase.Columns.Add("Name", nameColumnBase);
            var onReorderColumnBase = new ColumnBase<ColumnMappingBase>("OnReorder", "boolean", catalogServiceCatalogItemTableBase);
            catalogServiceCatalogItemTableBase.Columns.Add("OnReorder", onReorderColumnBase);
            var pictureFileNameColumnBase = new ColumnBase<ColumnMappingBase>("PictureFileName", "text", catalogServiceCatalogItemTableBase)
            {
                IsNullable = true
            };
            catalogServiceCatalogItemTableBase.Columns.Add("PictureFileName", pictureFileNameColumnBase);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("Price", "numeric", catalogServiceCatalogItemTableBase);
            catalogServiceCatalogItemTableBase.Columns.Add("Price", priceColumnBase);
            var restockThresholdColumnBase = new ColumnBase<ColumnMappingBase>("RestockThreshold", "integer", catalogServiceCatalogItemTableBase);
            catalogServiceCatalogItemTableBase.Columns.Add("RestockThreshold", restockThresholdColumnBase);
            relationalModel.DefaultTables.Add("CatalogService.CatalogItem", catalogServiceCatalogItemTableBase);
            var catalogServiceCatalogItemMappingBase = new TableMappingBase<ColumnMappingBase>(catalogItem, catalogServiceCatalogItemTableBase, true);
            catalogServiceCatalogItemTableBase.AddEntityTypeMapping(catalogServiceCatalogItemMappingBase, false);
            defaultTableMappings0.Add(catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("Id")!, catalogItem.FindProperty("Id")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("AvailableStock")!, catalogItem.FindProperty("AvailableStock")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("CatalogBrandId")!, catalogItem.FindProperty("CatalogBrandId")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("CatalogTypeId")!, catalogItem.FindProperty("CatalogTypeId")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("Description")!, catalogItem.FindProperty("Description")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("MaxStockThreshold")!, catalogItem.FindProperty("MaxStockThreshold")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("Name")!, catalogItem.FindProperty("Name")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("OnReorder")!, catalogItem.FindProperty("OnReorder")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("PictureFileName")!, catalogItem.FindProperty("PictureFileName")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("Price")!, catalogItem.FindProperty("Price")!, catalogServiceCatalogItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogItemTableBase.FindColumn("RestockThreshold")!, catalogItem.FindProperty("RestockThreshold")!, catalogServiceCatalogItemMappingBase);

            var tableMappings0 = new List<TableMapping>();
            catalogItem.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var catalogTable = new Table("Catalog", null, relationalModel);
            var idColumn0 = new Column("Id", "integer", catalogTable);
            catalogTable.Columns.Add("Id", idColumn0);
            var availableStockColumn = new Column("AvailableStock", "integer", catalogTable);
            catalogTable.Columns.Add("AvailableStock", availableStockColumn);
            var catalogBrandIdColumn = new Column("CatalogBrandId", "integer", catalogTable);
            catalogTable.Columns.Add("CatalogBrandId", catalogBrandIdColumn);
            var catalogTypeIdColumn = new Column("CatalogTypeId", "integer", catalogTable);
            catalogTable.Columns.Add("CatalogTypeId", catalogTypeIdColumn);
            var descriptionColumn = new Column("Description", "text", catalogTable)
            {
                IsNullable = true
            };
            catalogTable.Columns.Add("Description", descriptionColumn);
            var maxStockThresholdColumn = new Column("MaxStockThreshold", "integer", catalogTable);
            catalogTable.Columns.Add("MaxStockThreshold", maxStockThresholdColumn);
            var nameColumn = new Column("Name", "character varying(50)", catalogTable);
            catalogTable.Columns.Add("Name", nameColumn);
            var onReorderColumn = new Column("OnReorder", "boolean", catalogTable);
            catalogTable.Columns.Add("OnReorder", onReorderColumn);
            var pictureFileNameColumn = new Column("PictureFileName", "text", catalogTable)
            {
                IsNullable = true
            };
            catalogTable.Columns.Add("PictureFileName", pictureFileNameColumn);
            var priceColumn = new Column("Price", "numeric", catalogTable);
            catalogTable.Columns.Add("Price", priceColumn);
            var restockThresholdColumn = new Column("RestockThreshold", "integer", catalogTable);
            catalogTable.Columns.Add("RestockThreshold", restockThresholdColumn);
            var pK_Catalog = new UniqueConstraint("PK_Catalog", catalogTable, new[] { idColumn0 });
            catalogTable.PrimaryKey = pK_Catalog;
            var pK_CatalogUc = RelationalModel.GetKey(this,
                "CatalogService.CatalogItem",
                new[] { "Id" });
            pK_Catalog.MappedKeys.Add(pK_CatalogUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CatalogUc).Add(pK_Catalog);
            catalogTable.UniqueConstraints.Add("PK_Catalog", pK_Catalog);
            var iX_Catalog_CatalogBrandId = new TableIndex(
            "IX_Catalog_CatalogBrandId", catalogTable, new[] { catalogBrandIdColumn }, false);
            var iX_Catalog_CatalogBrandIdIx = RelationalModel.GetIndex(this,
                "CatalogService.CatalogItem",
                new[] { "CatalogBrandId" });
            iX_Catalog_CatalogBrandId.MappedIndexes.Add(iX_Catalog_CatalogBrandIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Catalog_CatalogBrandIdIx).Add(iX_Catalog_CatalogBrandId);
            catalogTable.Indexes.Add("IX_Catalog_CatalogBrandId", iX_Catalog_CatalogBrandId);
            var iX_Catalog_CatalogTypeId = new TableIndex(
            "IX_Catalog_CatalogTypeId", catalogTable, new[] { catalogTypeIdColumn }, false);
            var iX_Catalog_CatalogTypeIdIx = RelationalModel.GetIndex(this,
                "CatalogService.CatalogItem",
                new[] { "CatalogTypeId" });
            iX_Catalog_CatalogTypeId.MappedIndexes.Add(iX_Catalog_CatalogTypeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Catalog_CatalogTypeIdIx).Add(iX_Catalog_CatalogTypeId);
            catalogTable.Indexes.Add("IX_Catalog_CatalogTypeId", iX_Catalog_CatalogTypeId);
            relationalModel.Tables.Add(("Catalog", null), catalogTable);
            var catalogTableMapping = new TableMapping(catalogItem, catalogTable, true);
            catalogTable.AddEntityTypeMapping(catalogTableMapping, false);
            tableMappings0.Add(catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("Id")!, catalogItem.FindProperty("Id")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("AvailableStock")!, catalogItem.FindProperty("AvailableStock")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("CatalogBrandId")!, catalogItem.FindProperty("CatalogBrandId")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("CatalogTypeId")!, catalogItem.FindProperty("CatalogTypeId")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("Description")!, catalogItem.FindProperty("Description")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("MaxStockThreshold")!, catalogItem.FindProperty("MaxStockThreshold")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("Name")!, catalogItem.FindProperty("Name")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("OnReorder")!, catalogItem.FindProperty("OnReorder")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("PictureFileName")!, catalogItem.FindProperty("PictureFileName")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("Price")!, catalogItem.FindProperty("Price")!, catalogTableMapping);
            RelationalModel.CreateColumnMapping(catalogTable.FindColumn("RestockThreshold")!, catalogItem.FindProperty("RestockThreshold")!, catalogTableMapping);

            var catalogType = FindEntityType("CatalogService.CatalogType")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            catalogType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var catalogServiceCatalogTypeTableBase = new TableBase("CatalogService.CatalogType", null, relationalModel);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "integer", catalogServiceCatalogTypeTableBase);
            catalogServiceCatalogTypeTableBase.Columns.Add("Id", idColumnBase1);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "character varying(100)", catalogServiceCatalogTypeTableBase);
            catalogServiceCatalogTypeTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("CatalogService.CatalogType", catalogServiceCatalogTypeTableBase);
            var catalogServiceCatalogTypeMappingBase = new TableMappingBase<ColumnMappingBase>(catalogType, catalogServiceCatalogTypeTableBase, true);
            catalogServiceCatalogTypeTableBase.AddEntityTypeMapping(catalogServiceCatalogTypeMappingBase, false);
            defaultTableMappings1.Add(catalogServiceCatalogTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogTypeTableBase.FindColumn("Id")!, catalogType.FindProperty("Id")!, catalogServiceCatalogTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)catalogServiceCatalogTypeTableBase.FindColumn("Type")!, catalogType.FindProperty("Type")!, catalogServiceCatalogTypeMappingBase);

            var tableMappings1 = new List<TableMapping>();
            catalogType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var catalogTypeTable = new Table("CatalogType", null, relationalModel);
            var idColumn1 = new Column("Id", "integer", catalogTypeTable);
            catalogTypeTable.Columns.Add("Id", idColumn1);
            var typeColumn = new Column("Type", "character varying(100)", catalogTypeTable);
            catalogTypeTable.Columns.Add("Type", typeColumn);
            var pK_CatalogType = new UniqueConstraint("PK_CatalogType", catalogTypeTable, new[] { idColumn1 });
            catalogTypeTable.PrimaryKey = pK_CatalogType;
            var pK_CatalogTypeUc = RelationalModel.GetKey(this,
                "CatalogService.CatalogType",
                new[] { "Id" });
            pK_CatalogType.MappedKeys.Add(pK_CatalogTypeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CatalogTypeUc).Add(pK_CatalogType);
            catalogTypeTable.UniqueConstraints.Add("PK_CatalogType", pK_CatalogType);
            relationalModel.Tables.Add(("CatalogType", null), catalogTypeTable);
            var catalogTypeTableMapping = new TableMapping(catalogType, catalogTypeTable, true);
            catalogTypeTable.AddEntityTypeMapping(catalogTypeTableMapping, false);
            tableMappings1.Add(catalogTypeTableMapping);
            RelationalModel.CreateColumnMapping(catalogTypeTable.FindColumn("Id")!, catalogType.FindProperty("Id")!, catalogTypeTableMapping);
            RelationalModel.CreateColumnMapping(catalogTypeTable.FindColumn("Type")!, catalogType.FindProperty("Type")!, catalogTypeTableMapping);
            var fK_Catalog_CatalogBrand_CatalogBrandId = new ForeignKeyConstraint(
                "FK_Catalog_CatalogBrand_CatalogBrandId", catalogTable, catalogBrandTable,
                new[] { catalogBrandIdColumn },
                catalogBrandTable.FindUniqueConstraint("PK_CatalogBrand")!, ReferentialAction.Cascade);
            var fK_Catalog_CatalogBrand_CatalogBrandIdFk = RelationalModel.GetForeignKey(this,
                "CatalogService.CatalogItem",
                new[] { "CatalogBrandId" },
                "CatalogService.CatalogBrand",
                new[] { "Id" });
            fK_Catalog_CatalogBrand_CatalogBrandId.MappedForeignKeys.Add(fK_Catalog_CatalogBrand_CatalogBrandIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Catalog_CatalogBrand_CatalogBrandIdFk).Add(fK_Catalog_CatalogBrand_CatalogBrandId);
            catalogTable.ForeignKeyConstraints.Add(fK_Catalog_CatalogBrand_CatalogBrandId);
            catalogBrandTable.ReferencingForeignKeyConstraints.Add(fK_Catalog_CatalogBrand_CatalogBrandId);
            var fK_Catalog_CatalogType_CatalogTypeId = new ForeignKeyConstraint(
                "FK_Catalog_CatalogType_CatalogTypeId", catalogTable, catalogTypeTable,
                new[] { catalogTypeIdColumn },
                catalogTypeTable.FindUniqueConstraint("PK_CatalogType")!, ReferentialAction.Cascade);
            var fK_Catalog_CatalogType_CatalogTypeIdFk = RelationalModel.GetForeignKey(this,
                "CatalogService.CatalogItem",
                new[] { "CatalogTypeId" },
                "CatalogService.CatalogType",
                new[] { "Id" });
            fK_Catalog_CatalogType_CatalogTypeId.MappedForeignKeys.Add(fK_Catalog_CatalogType_CatalogTypeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Catalog_CatalogType_CatalogTypeIdFk).Add(fK_Catalog_CatalogType_CatalogTypeId);
            catalogTable.ForeignKeyConstraints.Add(fK_Catalog_CatalogType_CatalogTypeId);
            catalogTypeTable.ReferencingForeignKeyConstraints.Add(fK_Catalog_CatalogType_CatalogTypeId);
            return relationalModel.MakeReadOnly();
        }
    }
}
