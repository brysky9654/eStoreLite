@inject CatalogService CatalogService

<html>
<head>
    <title>eShopLite</title>
    <link rel="stylesheet" href="site.css" />
</head>
<body>
    <h3>Catalog</h3>

    <div class="container">
        @if (catalog is { Data: var data })
        {
            <div class="grid">
                @foreach (var item in data)
                {
                    <div class="grid-item">
                        <div class="grid-item-content">
                            <img src="catalog/images/@item.Id" alt="@item.Name" />
                            <div class="grid-item-text">
                                <h4>@item.Name</h4>
                                <p>@item.Description</p>
                                <p>@item.Price</p>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="pager">
                @if (paginationInfo.HasPreviousPage)
                {
                    <a class="previous" href="?page=@(paginationInfo.ActualPage - 1)">Previous</a>
                }

                @if (paginationInfo.HasNextPage)
                {
                    <a class="next" href="?page=@(paginationInfo.ActualPage + 1)">Next</a>
                }
            </div>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</body>
</html>

@code {
    Catalog? catalog;
    PaginationInfo paginationInfo = new(ActualPage: 0, HasPreviousPage: false, HasNextPage: false);

    [Parameter]
    public int? Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var itemsPerPage = 10;
        var page = Page ?? 0;

        catalog = await CatalogService.GetItemsAsync(page);

        if (catalog is null)
        {
            return;
        }

        // Calculate the total number of pages
        var totalPages = (int)Math.Ceiling(catalog.Count / (decimal)itemsPerPage);
        paginationInfo = new PaginationInfo(catalog.PageIndex, catalog.PageSize > 0, catalog.PageIndex - 1 < totalPages);
    }

    record PaginationInfo(int ActualPage, bool HasPreviousPage, bool HasNextPage);
}