@inject CatalogService CatalogService

<html>
<head>
    <title>eShopLite</title>
    <link rel="stylesheet" href="site.css" />
</head>
<body>
    <h3>Catalog</h3>

    @if (catalog is { Data: var data })
    {
        <div class="grid">
            @foreach (var item in data)
            {
                <div class="grid-item">
                    <div class="grid-item-content">
                        <img src="@item.PictureUri" alt="@item.Name" />
                        <div class="grid-item-text">
                            <h4>@item.Name</h4>
                            <p>@item.Description</p>
                            <p>@item.Price</p>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="paging">
            @if (paginationInfo!.ActualPage > 0)
            {
                <a href="?page=@(paginationInfo.ActualPage - 1)">Previous</a>
            }

            @if (paginationInfo.ActualPage < paginationInfo.TotalPages - 1)
            {
                <a href="?page=@(paginationInfo.ActualPage + 1)">Next</a>
            }
        </div>
    }
    else
    {
        <p>Loading...</p>
    }

</body>
</html>

@code {
    Catalog? catalog;
    PaginationInfo? paginationInfo;

    [Parameter]
    public int? Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var itemsPerPage = 10;
        var page = Page ?? 0;

        catalog = await CatalogService.GetItemsAsync(page);

        if (catalog is null)
        {
            return;
        }

        // Calculate the total number of pages
        var totalPages = (int)Math.Ceiling(catalog.Count / (decimal)itemsPerPage);
        paginationInfo = new PaginationInfo(catalog.PageIndex, catalog.PageSize, catalog.Data.Count, totalPages);
    }

    record PaginationInfo(int ActualPage, int ItemsPerPage, int TotalItems, int TotalPages);
}